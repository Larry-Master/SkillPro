<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pages/mentors/[id].js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pages/mentors/[id].js" />
              <option name="originalContent" value="import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/router&quot;;&#10;import MentorForm from &quot;./_components/MentorForm&quot;;&#10;&#10;export default function MentorDetail() {&#10;  const router = useRouter();&#10;  const { id } = router.query;&#10;  const [mentor, setMentor] = useState(null);&#10;  const [loading, setLoading] = useState(true);&#10;  const [edit, setEdit] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;    setLoading(true);&#10;    fetch(`/api/mentors/${id}`)&#10;      .then((res) =&gt; res.json())&#10;      .then(setMentor)&#10;      .catch(() =&gt; setError(&quot;Fehler beim Laden&quot;))&#10;      .finally(() =&gt; setLoading(false));&#10;  }, [id]);&#10;&#10;  const handleUpdate = async (data) =&gt; {&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      const res = await fetch(`/api/mentors/${id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(data),&#10;      });&#10;      if (!res.ok) throw new Error(&quot;Fehler beim Aktualisieren&quot;);&#10;      setEdit(false);&#10;      setMentor(await res.json());&#10;    } catch (e) {&#10;      setError(e.message);&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const handleDelete = async () =&gt; {&#10;    if (!confirm(&quot;Wirklich löschen?&quot;)) return;&#10;    setLoading(true);&#10;    await fetch(`/api/mentors/${id}`, { method: &quot;DELETE&quot; });&#10;    router.push(&quot;/mentors&quot;);&#10;  };&#10;&#10;  if (loading) return &lt;div&gt;Lädt...&lt;/div&gt;;&#10;  if (error) return &lt;div&gt;{error}&lt;/div&gt;;&#10;  if (!mentor) return &lt;div&gt;Kein Mentor gefunden&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Mentor: {mentor.name}&lt;/h1&gt;&#10;      &lt;button onClick={() =&gt; router.push(&quot;/mentors&quot;)}&gt;Zurück&lt;/button&gt;&#10;      &lt;button onClick={handleDelete} style={{ marginLeft: 8 }}&gt;Löschen&lt;/button&gt;&#10;      &lt;button onClick={() =&gt; setEdit((e) =&gt; !e)} style={{ marginLeft: 8 }}&gt;&#10;        {edit ? &quot;Abbrechen&quot; : &quot;Bearbeiten&quot;}&#10;      &lt;/button&gt;&#10;      {edit ? (&#10;        &lt;MentorForm initialData={mentor} onSubmit={handleUpdate} loading={loading} /&gt;&#10;      ) : (&#10;        &lt;div&gt;&#10;          &lt;p&gt;&lt;b&gt;Email:&lt;/b&gt; {mentor.email}&lt;/p&gt;&#10;          &lt;p&gt;&lt;b&gt;Branche:&lt;/b&gt; {mentor.industry}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;export default function MentorTable({ mentors, onEdit, onDelete }) {&#10;  return (&#10;    &lt;table&gt;&#10;      &lt;thead&gt;&#10;        &lt;tr&gt;&#10;          &lt;th&gt;Name&lt;/th&gt;&#10;          &lt;th&gt;Email&lt;/th&gt;&#10;          &lt;th&gt;Branche&lt;/th&gt;&#10;          &lt;th&gt;Aktionen&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/thead&gt;&#10;      &lt;tbody&gt;&#10;        {mentors.map((mentor) =&gt; (&#10;          &lt;tr key={mentor.id}&gt;&#10;            &lt;td&gt;{mentor.name}&lt;/td&gt;&#10;            &lt;td&gt;{mentor.email}&lt;/td&gt;&#10;            &lt;td&gt;{mentor.industry}&lt;/td&gt;&#10;            &lt;td&gt;&#10;              &lt;button onClick={() =&gt; onEdit(mentor.id)}&gt;Bearbeiten&lt;/button&gt;&#10;              &lt;button onClick={() =&gt; onDelete(mentor.id)}&gt;Löschen&lt;/button&gt;&#10;            &lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        ))}&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/router&quot;;&#10;import MentorForm from &quot;./_components/MentorForm&quot;;&#10;&#10;export default function MentorDetail() {&#10;  const router = useRouter();&#10;  const { id } = router.query;&#10;  const [mentor, setMentor] = useState(null);&#10;  const [loading, setLoading] = useState(true);&#10;  const [edit, setEdit] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;    setLoading(true);&#10;    fetch(`/api/mentors/${id}`)&#10;      .then((res) =&gt; res.json())&#10;      .then(setMentor)&#10;      .catch(() =&gt; setError(&quot;Fehler beim Laden&quot;))&#10;      .finally(() =&gt; setLoading(false));&#10;  }, [id]);&#10;&#10;  const handleUpdate = async (data) =&gt; {&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      const res = await fetch(`/api/mentors/${id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(data),&#10;      });&#10;      if (!res.ok) throw new Error(&quot;Fehler beim Aktualisieren&quot;);&#10;      setEdit(false);&#10;      setMentor(await res.json());&#10;    } catch (e) {&#10;      setError(e.message);&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const handleDelete = async () =&gt; {&#10;    if (!confirm(&quot;Wirklich löschen?&quot;)) return;&#10;    setLoading(true);&#10;    await fetch(`/api/mentors/${id}`, { method: &quot;DELETE&quot; });&#10;    router.push(&quot;/mentors&quot;);&#10;  };&#10;&#10;  if (loading) return &lt;div&gt;Lädt...&lt;/div&gt;;&#10;  if (error) return &lt;div&gt;{error}&lt;/div&gt;;&#10;  if (!mentor) return &lt;div&gt;Kein Mentor gefunden&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Mentor: {mentor.name}&lt;/h1&gt;&#10;      &lt;button onClick={() =&gt; router.push(&quot;/mentors&quot;)}&gt;Zurück&lt;/button&gt;&#10;      &lt;button onClick={handleDelete} style={{ marginLeft: 8 }}&gt;Löschen&lt;/button&gt;&#10;      &lt;button onClick={() =&gt; setEdit((e) =&gt; !e)} style={{ marginLeft: 8 }}&gt;&#10;        {edit ? &quot;Abbrechen&quot; : &quot;Bearbeiten&quot;}&#10;      &lt;/button&gt;&#10;      {edit ? (&#10;        &lt;MentorForm initialData={mentor} onSubmit={handleUpdate} loading={loading} /&gt;&#10;      ) : (&#10;        &lt;div&gt;&#10;          &lt;p&gt;&lt;b&gt;Email:&lt;/b&gt; {mentor.email}&lt;/p&gt;&#10;          &lt;p&gt;&lt;b&gt;Branche:&lt;/b&gt; {mentor.industry}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pages/mentors/_components/MentorTable.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pages/mentors/_components/MentorTable.js" />
              <option name="originalContent" value="// pages/api/mentors/index.js&#10;import { connectDB } from '../../../lib/db';&#10;import Mentor from '../../../models/Mentor';&#10;&#10;export default async function handler(req, res) {&#10;  await connectDB();&#10;&#10;  if (req.method === 'GET') {&#10;    const mentors = await Mentor.find({});&#10;    return res.status(200).json(mentors);&#10;  }&#10;&#10;  if (req.method === 'POST') {&#10;    try {&#10;      const doc = await Mentor.create(req.body);&#10;      return res.status(201).json(doc);&#10;    } catch (err) {&#10;      return res.status(400).json({ success: false, message: err.message });&#10;    }&#10;  }&#10;&#10;  return res.status(405).json({ success: false, message: 'Method not allowed' });&#10;}&#10;export default function MentorTable({ mentors, onEdit, onDelete }) {&#10;  return (&#10;    &lt;table&gt;&#10;      &lt;thead&gt;&#10;        &lt;tr&gt;&#10;          &lt;th&gt;Name&lt;/th&gt;&#10;          &lt;th&gt;Email&lt;/th&gt;&#10;          &lt;th&gt;Branche&lt;/th&gt;&#10;          &lt;th&gt;Aktionen&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/thead&gt;&#10;      &lt;tbody&gt;&#10;        {mentors.map((mentor) =&gt; (&#10;          &lt;tr key={mentor.id || mentor._id}&gt;&#10;            &lt;td&gt;{mentor.name}&lt;/td&gt;&#10;            &lt;td&gt;{mentor.email}&lt;/td&gt;&#10;            &lt;td&gt;{mentor.industry}&lt;/td&gt;&#10;            &lt;td&gt;&#10;              {onEdit &amp;&amp; (&#10;                &lt;button onClick={() =&gt; onEdit(mentor.id || mentor._id)}&gt;Bearbeiten&lt;/button&gt;&#10;              )}&#10;              {onDelete &amp;&amp; (&#10;                &lt;button onClick={() =&gt; onDelete(mentor.id || mentor._id)}&gt;Löschen&lt;/button&gt;&#10;              )}&#10;            &lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        ))}&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="export default function MentorTable({ mentors, onEdit, onDelete }) {&#10;  return (&#10;    &lt;table&gt;&#10;      &lt;thead&gt;&#10;        &lt;tr&gt;&#10;          &lt;th&gt;Name&lt;/th&gt;&#10;          &lt;th&gt;Email&lt;/th&gt;&#10;          &lt;th&gt;Branche&lt;/th&gt;&#10;          &lt;th&gt;Aktionen&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/thead&gt;&#10;      &lt;tbody&gt;&#10;        {mentors.map((mentor) =&gt; (&#10;          &lt;tr key={mentor.id || mentor._id}&gt;&#10;            &lt;td&gt;{mentor.name}&lt;/td&gt;&#10;            &lt;td&gt;{mentor.email}&lt;/td&gt;&#10;            &lt;td&gt;{mentor.industry}&lt;/td&gt;&#10;            &lt;td&gt;&#10;              {onEdit &amp;&amp; (&#10;                &lt;button onClick={() =&gt; onEdit(mentor.id || mentor._id)}&gt;Bearbeiten&lt;/button&gt;&#10;              )}&#10;              {onDelete &amp;&amp; (&#10;                &lt;button onClick={() =&gt; onDelete(mentor.id || mentor._id)}&gt;Löschen&lt;/button&gt;&#10;              )}&#10;            &lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        ))}&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pages/mentors/index.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pages/mentors/index.js" />
              <option name="originalContent" value="import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/router&quot;;&#10;import MentorTable from &quot;./_components/MentorTable&quot;;&#10;&#10;export default function MentorsIndex() {&#10;  const [mentors, setMentors] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    fetch(&quot;/api/mentors&quot;)&#10;      .then((res) =&gt; res.json())&#10;      .then(setMentors)&#10;      .catch(() =&gt; setError(&quot;Fehler beim Laden&quot;))&#10;      .finally(() =&gt; setLoading(false));&#10;  }, []);&#10;&#10;  const handleEdit = (id) =&gt; router.push(`/mentors/${id}`);&#10;  const handleDelete = async (id) =&gt; {&#10;    if (!confirm(&quot;Wirklich löschen?&quot;)) return;&#10;    setLoading(true);&#10;    await fetch(`/api/mentors/${id}`, { method: &quot;DELETE&quot; });&#10;    setMentors((prev) =&gt; prev.filter((m) =&gt; m.id !== id));&#10;    setLoading(false);&#10;  };&#10;&#10;  if (loading) return &lt;div&gt;Lädt...&lt;/div&gt;;&#10;  if (error) return &lt;div&gt;{error}&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Mentoren&lt;/h1&gt;&#10;      &lt;button onClick={() =&gt; router.push(&quot;/mentors/create&quot;)}&gt;Neu&lt;/button&gt;&#10;      &lt;MentorTable mentors={mentors} onEdit={handleEdit} onDelete={handleDelete} /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/router&quot;;&#10;import MentorTable from &quot;./_components/MentorTable&quot;;&#10;&#10;export default function MentorsIndex() {&#10;  const [mentors, setMentors] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    fetch(&quot;/api/mentors&quot;)&#10;      .then((res) =&gt; res.json())&#10;      .then(setMentors)&#10;      .catch(() =&gt; setError(&quot;Fehler beim Laden&quot;))&#10;      .finally(() =&gt; setLoading(false));&#10;  }, []);&#10;&#10;  const handleEdit = (id) =&gt; router.push(`/mentors/${id}`);&#10;  const handleDelete = async (id) =&gt; {&#10;    if (!confirm(&quot;Wirklich löschen?&quot;)) return;&#10;    setLoading(true);&#10;    await fetch(`/api/mentors/${id}`, { method: &quot;DELETE&quot; });&#10;    setMentors((prev) =&gt; prev.filter((m) =&gt; (m.id || m._id) !== id));&#10;    setLoading(false);&#10;  };&#10;&#10;  if (loading) return &lt;div&gt;Lädt...&lt;/div&gt;;&#10;  if (error) return &lt;div&gt;{error}&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Mentoren&lt;/h1&gt;&#10;      &lt;button onClick={() =&gt; router.push(&quot;/mentors/create&quot;)}&gt;Neu&lt;/button&gt;&#10;      &lt;MentorTable mentors={mentors} onEdit={handleEdit} onDelete={handleDelete} /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/skillpro/components/Navbar.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/skillpro/components/Navbar.js" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>